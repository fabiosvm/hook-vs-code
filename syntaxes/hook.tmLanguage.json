{
	"name": "Hook",
    "scopeName": "source.hook",
    "uuid": "9cf1ac87-6899-4ef6-9166-854fac15e2f6",
	"patterns": [
		{
			"match": "(?x)-?(?:0|[1-9]\\d*)(?:(?:\\.\\d+)?(?:[eE][+-]?\\d+)?)?",
			"name": "constant.numeric.hook"
		},
		{
			"begin": "'",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.hook"
				}
			},
			"end": "'",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.hook"
				}
			},
			"name": "string.quoted.single.hook",
			"patterns": [
				{
					"include": "#escaped_char"
				}
			]
		},

		{
			"begin": "\"",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.hook"
				}
			},
			"end": "\"",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.hook"
				}
			},
			"name": "string.quoted.double.hook",
			"patterns": [
				{
					"include": "#escaped_char"
				}
			]
		},

		{
			"captures": {
				"1": {
					"name": "punctuation.definition.comment.hook"
				}
			},
			"match": "\\A(#!).*$\\n?",
			"name": "comment.line.shebang.hook"
		},
		{
			"begin": "(^[ \\t]+)?(?=//)",
			"beginCaptures": {
				"1": {
					"name": "punctuation.whitespace.comment.leading.hook"
				}
			},
			"end": "(?!\\G)((?!^)[ \\t]+\\n)?",
			"endCaptures": {
				"1": {
					"name": "punctuation.whitespace.comment.trailing.hook"
				}
			},
			"patterns": [
				{
					"begin": "//",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.comment.hook"
						}
					},
					"end": "\\n",
					"name": "comment.line.double-slash.hook"
				}
			]
		},
		{
			"match": "\\b(as|break|continue|del|do|else|fn|for|foreach|from|if|if!|import|in|let|loop|match|return|struct|var|while|while!)\\b",
			"name": "keyword.control.hook"
		},		
		{
			"match": "(?<![^.]\\.|:)\\b(nil|false|true)\\b|(?<![.])\\.{3}(?!\\.)",
			"name": "constant.language.hook"
		},
		{			
			"match": "(?<![^.]\\.|:)\\b(print|println|type|is_nil|is_bool|is_number|is_int|is_string|is_range|is_array|is_struct|is_instance|is_iterator|is_callable|is_userdata|is_object|is_comparable|is_iterable|to_bool|to_int|to_number|to_string|ord|chr|hex|bin|address|refcount|cap|len|is_empty|compare|split|join|iter|valid|current|next|sleep|assert|panic)\\b(?=\\s*(?:[({\"']|\\[\\[))",
			"name": "support.function.hook"
		},
		{
			"match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b(?=\\s*(?:[({\"']|\\[\\[))",
			"name": "support.function.any-method.hook"
		},
		{
			"match": "(?<=[^.]\\.|:)\\b([a-zA-Z_][a-zA-Z0-9_]*)",
			"name": "variable.other.hook"
		},
		{
			"match": "&&|\\|\\||\\+|-|\\*|\\/|%|==?|!=?|>=?|<=?|(?<!\\.)\\.{2}(?!\\.)",
			"name": "keyword.operator.hook"
		}
	],
	"repository": {
		"escaped_char": {
			"patterns": [
				{
					"match": "\\\\[abfnrtvz\\\\\"'\\n]",
					"name": "constant.character.escape.hook"
				},
				{
					"match": "\\\\\\d{1,3}",
					"name": "constant.character.escape.byte.hook"
				},
				{
					"match": "\\\\x[0-9A-Fa-f][0-9A-Fa-f]",
					"name": "constant.character.escape.byte.hook"
				},
				{
					"match": "\\\\u\\{[0-9A-Fa-f]+\\}",
					"name": "constant.character.escape.unicode.hook"
				},
				{
					"match": "\\\\.",
					"name": "invalid.illegal.character.escape.hook"
				}
			]
		}
	}
}
