{
	"import declaration": {
		"prefix": "import",
		"body": [
			"import ${1:name};"
		]
	},
	"import..as declaration": {
		"prefix": "importa",
		"body": [
			"import ${1:name} as ${2:name};"
		]
	},
	"destructured import declaration": {
		"prefix": "import{",
		"body": [
			"import { ${1:name} } from ${2:name};"
		]
	},
	"import math declaration": {
		"prefix": "importm",
		"body": [
			"import math;"
		]
	},
	"import os declaration": {
		"prefix": "importos",
		"body": [
			"import os;"
		]
	},
	"import io declaration": {
		"prefix": "importio",
		"body": [
			"import io;"
		]
	},
	"import numbers declaration": {
		"prefix": "importnum",
		"body": [
			"import numbers;"
		]
	},	
	"import strings declaration": {
		"prefix": "importstr",
		"body": [
			"import strings;"
		]
	},
	"import arrays declaration": {
		"prefix": "importarr",
		"body": [
			"import arrays;"
		]
	},
	"import utf8 declaration": {
		"prefix": "importu",
		"body": [
			"import utf8;"
		]
	},
	"import regex declaration": {
		"prefix": "importreg",
		"body": [
			"import regex;"
		]
	},
	"import hashing declaration": {
		"prefix": "importhash",
		"body": [
			"import hashing;"
		]
	},
	"import encoding declaration": {
		"prefix": "importenc",
		"body": [
			"import encoding;"
		]
	},
	"import socket declaration": {
		"prefix": "importsoc",
		"body": [
			"import socket;"
		]
	},
	"constant declaration": {
		"prefix": "let",
		"body": [
			"let ${1:name} = ${2:expression};"
		]
	},
	"unpacking to constant": {
		"prefix": "let[",
		"body": [
			"let [ ${1:name} ] = ${2:expression};"
		]
	},
	"destructuring to constant": {
		"prefix": "let{",
		"body": [
			"let { ${1:name} } = ${2:expression};"
		]
	},
	"variable declaration": {
		"prefix": "mut",
		"body": [
			"mut ${1:name} = ${2:expression};"
		]
	},
	"unpacking to variable": {
		"prefix": "mut[",
		"body": [
			"mut [ ${1:name} ] = ${2:expression};"
		]
	},
	"destructuring to variable": {
		"prefix": "mut{",
		"body": [
			"mut { ${1:name} } = ${2:expression};"
		]
	},
	"struct declaration": {
		"prefix": "struct",
		"body": [
			"struct ${1:name} {",
			"  ${2:field},",
			"}"
		]
	},
	"anonymous struct": {
		"prefix": "structa",
		"body": [
			"struct {",
			"  ${1:field},",
			"}"
		]
	},
	"function declaration": {
		"prefix": "fn",
		"body": [
			"fn ${1:name} (${2:param}) {",
			"  ${3:statement};",
			"}"
		]
	},
	"anonymous function": {
		"prefix": "|(",
		"body": [
			"| ${1:param} | {",
			"  ${2:statement};",
			"}"
		]
	},
	"arrow function declaration": {
		"prefix": "fn=>",
		"body": [
			"fn ${1:name} (${2:param}) => ${3:expression}"
		]
	},
	"anonymous arrow function": {
		"prefix": "|(=>",
		"body": [
			"| ${1:param} | => ${2:expression}"
		]
	},
	"del statement": {
		"prefix": "del",
		"body": [
			"del ${1:name}[${2:expression}];"
		]
	},
	"if statement": {
		"prefix": "if",
		"body": [
			"if (${1:expression}) {",
			"  ${2:statement};",
			"}"
		]
	},
	"if..else statement": {
		"prefix": "ifel",
		"body": [
			"if (${1:expression}) {",
			"  ${2:statement};",
			"} else {",
			"  ${3:statement};",
			"}"
		]
	},
	"if expression": {
		"prefix": "ife",
		"body": [
			"if (${1:expression}) ${2:expression} else ${3:expression}"
		]
	},
	"if! statement": {
		"prefix": "if!",
		"body": [
			"if! (${1:expression}) {",
			"  ${2:statement};",
			"}"
		]
	},
	"if!..else statement": {
		"prefix": "if!el",
		"body": [
			"if! (${1:expression}) {",
			"  ${2:statement};",
			"} else {",
			"  ${3:statement};",
			"}"
		]
	},
	"if! expression": {
		"prefix": "if!e",
		"body": [
			"if! (${1:expression}) ${2:expression} else ${3:expression}"
		]
	},
	"match statement": {
		"prefix": "match",
		"body": [
			"match (${1:expression}) {",
			"  ${2:expression} => ${3:statement};",
			"}"
		]
	},
	"match.._ statement": {
		"prefix": "match_",
		"body": [
			"match (${1:expression}) {",
			"  ${2:expression} => ${3:statement};",
			"  _ => ${4:statement};",
			"}"
		]
	},
	"match expression": {
		"prefix": "matche",
		"body": [
			"match (${1:expression}) {",
			"  ${2:expression} => ${3:expression},",
			"  _ => ${4:expression}",
			"}"
		]
	},
	"loop statement": {
		"prefix": "loop",
		"body": [
			"loop {",
			"  ${1:statement};",
			"}"
		]
	},
	"while statement": {
		"prefix": "while",
		"body": [
			"while (${1:expression}) {",
			"  ${2:statement};",
			"}"
		]
	},
	"do..while statement": {
		"prefix": "do",
		"body": [
			"do {",
			"  ${1:statement};",
			"} while (${2:expression});"
		]
	},
	"while! statement": {
		"prefix": "while!",
		"body": [
			"while! (${1:expression}) {",
			"  ${2:statement};",
			"}"
		]
	},
	"do..while! statement": {
		"prefix": "do!",
		"body": [
			"do {",
			"  ${1:statement};",
			"} while! (${2:expression});"
		]
	},
	"for statement": {
		"prefix": "for",
		"body": [
			"for (mut i = ${1:0}; i < ${2:n}; ${3:i++}) {",
			"  ${4:statement};",
			"}"
		]
	},
	"foreach statement": {
		"prefix": "foreach",
		"body": [
			"foreach (${1:name} in ${2:expression}) {",
			"  ${3:statement};",
			"}"
		]
	},
	"continue": {
		"prefix": "co",
		"body": [
			"continue;"
		]
	},
	"break": {
		"prefix": "br",
		"body": [
			"break;"
		]
	},
	"return": {
		"prefix": "ret",
		"body": [
			"return ${1:expression};"
		]
	},
	"return nil": {
		"prefix": "ret;",
		"body": [
			"return;"
		]
	}
}
