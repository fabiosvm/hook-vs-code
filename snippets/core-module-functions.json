{
	"math.abs() core module function": {
		"prefix": "abs",
		"body": [
			"math.abs(${1:value})"
		]
	},
	"math.sin() core module function": {
		"prefix": "sin",
		"body": [
			"math.sin(${1:value});"
		]
	},
	"math.cos() core module function": {
		"prefix": "cos",
		"body": [
			"math.cos(${1:value})"
		]
	},
	"math.tan() core module function": {
		"prefix": "tan",
		"body": [
			"math.tan(${1:value})"
		]
	},
	"math.asin() core module function": {
		"prefix": "asin",
		"body": [
			"math.asin(${1:value})"
		]
	},
	"math.acos() core module function": {
		"prefix": "acos",
		"body": [
			"math.acos(${1:value})"
		]
	},
	"math.atan() core module function": {
		"prefix": "atan",
		"body": [
			"math.atan(${1:value})"
		]
	},
	"math.floor() core module function": {
		"prefix": "flo",
		"body": [
			"math.floor(${1:float})"
		]
	},
	"math.ceil() core module function": {
		"prefix": "cei",
		"body": [
			"math.ceil(${1:int})"
		]
	},
	"math.round() core module function": {
		"prefix": "rou",
		"body": [
			"math.round(${1:string})"
		]
	},
	"math.pow() core module function": {
		"prefix": "pow",
		"body": [
			"math.pow(${1:base}, ${2:power})"
		]
	},
	"math.sqrt() core module function": {
		"prefix": "sqrt",
		"body": [
			"math.sqrt(${1:value})"
		]
	},
	"math.cbrt() core module function": {
		"prefix": "cbrt",
		"body": [
			"math.cbrt(${1:value})"
		]
	},
	"math.log() core module function": {
		"prefix": "log",
		"body": [
			"math.log(${1:value})"
		]
	},
	"math.log2() core module function": {
		"prefix": "log2",
		"body": [
			"math.log2(${1:value})"
		]
	},
	"math.log10() core module function": {
		"prefix": "log10",
		"body": [
			"math.log10(${1:value})"
		]
	},
	"math.exp() core module function": {
		"prefix": "exp",
		"body": [
			"math.exp(${1:value})"
		]
	},
	"os.CLOCKS_PER_SEC constant": {
		"prefix": "clocks",
		"body": [
			"os.CLOCKS_PER_SEC"
		]
	},
	"os.clock() core module function": {
		"prefix": "clo",
		"body": [
			"os.clock()"
		]
	},
	"os.time() core module function": {
		"prefix": "time",
		"body": [
			"os.time()"
		]
	},
	"os.system() core module function": {
		"prefix": "sys",
		"body": [
			"os.system(${1:command})"
		]
	},
	"os.getenv() core module function": {
		"prefix": "getenv",
		"body": [
			"os.getenv(${1:variable})"
		]
	},
	"os.name() core module function": {
		"prefix": "name",
		"body": [
			"os.name()"
		]
	},
	"io.stdin constant": {
		"prefix": "stdi",
		"body": [
			"io.stdin"
		]
	},
	"io.stdout constant": {
		"prefix": "stdo",
		"body": [
			"io.stdout"
		]
	},
	"io.stderr constant": {
		"prefix": "stde",
		"body": [
			"io.stderr"
		]
	},
	"io.SEEK_SET constant": {
		"prefix": "seeks",
		"body": [
			"io.SEEK_SET"
		]
	},
	"io.SEEK_CUR constant": {
		"prefix": "seekc",
		"body": [
			"io.SEEK_CUR"
		]
	},
	"io.SEEK_END constant": {
		"prefix": "seeke",
		"body": [
			"io.SEEK_END"
		]
	},
	"io.open() core module function": {
		"prefix": "open",
		"body": [
			"io.open(${1:filename}, ${2:mode})"
		]
	},
	"io.close() core module function": {
		"prefix": "close",
		"body": [
			"io.close(${1:stream})"
		]
	},
	"io.popen() core module function": {
		"prefix": "popen",
		"body": [
			"io.popen(${1:command}, ${2:mode})"
		]
	},
	"io.pclose() core module function": {
		"prefix": "pclose",
		"body": [
			"io.pclose(${1:stream})"
		]
	},
	"io.eof() core module function": {
		"prefix": "eof",
		"body": [
			"io.eof(${1:stream})"
		]
	},
	"io.flush() core module function": {
		"prefix": "flush",
		"body": [
			"io.flush(${1:stream})"
		]
	},
	"io.sync() core module function": {
		"prefix": "sync",
		"body": [
			"io.sync(${1:stream})"
		]
	},
	"io.tell() core module function": {
		"prefix": "tell",
		"body": [
			"io.tell(${1:stream})"
		]
	},
	"io.rewind() core module function": {
		"prefix": "rewind",
		"body": [
			"io.rewind(${1:stream})"
		]
	},
	"io.seek() core module function": {
		"prefix": "seek",
		"body": [
			"io.seek(${1:stream}, ${2:offset}, ${3:whence})"
		]
	},
	"io.read() core module function": {
		"prefix": "read",
		"body": [
			"io.read(${1:stream}, ${2:size})"
		]
	},
	"io.write() core module function": {
		"prefix": "write",
		"body": [
			"io.write(${1:stream}, ${2:string})"
		]
	},
	"io.readln() core module function": {
		"prefix": "readln",
		"body": [
			"io.readln(${1:stream})"
		]
	},
	"io.writeln() core module function": {
		"prefix": "writeln",
		"body": [
			"io.writeln(${1:stream}, ${2:string})"
		]
	},
	"numbers.PI constant": {
		"prefix": "pi",
		"body": [
			"numbers.PI"
		]
	},
	"numbers.TAU constant": {
		"prefix": "tau",
		"body": [
			"numbers.TAU"
		]
	},
	"numbers.LARGEST constant": {
		"prefix": "large",
		"body": [
			"numbers.LARGEST"
		]
	},
	"numbers.SMALLEST constant": {
		"prefix": "small",
		"body": [
			"numbers.SMALLEST"
		]
	},
	"numbers.MAX_INTEGER constant": {
		"prefix": "maxi",
		"body": [
			"numbers.MAX_INTEGER"
		]
	},
	"numbers.MIN_INTEGER constant": {
		"prefix": "mini",
		"body": [
			"numbers.MIN_INTEGER"
		]
	},
	"numbers.srand() core module function": {
		"prefix": "srand",
		"body": [
			"numbers.srand()"
		]
	},
	"numbers.rand() core module function": {
		"prefix": "rand",
		"body": [
			"numbers.rand()"
		]
	},
	"strings.new_string() core module function": {
		"prefix": "news",
		"body": [
			"strings.new_string((${1:capacity}))"
		]
	},
	"strings.repeat() core module function": {
		"prefix": "repeat",
		"body": [
			"strings.repeat((${1:string}, ${2:count}))"
		]
	},
	"strings.hash() core module function": {
		"prefix": "hash",
		"body": [
			"strings.hash(${1:string})"
		]
	},
	"strings.lower() core module function": {
		"prefix": "lower",
		"body": [
			"strings.lower(${1:string})"
		]
	},
	"strings.upper() core module function": {
		"prefix": "upper",
		"body": [
			"strings.upper(${1:string})"
		]
	},
	"strings.trim() core module function": {
		"prefix": "trim",
		"body": [
			"strings.trim(${1:string})"
		]
	},
	"strings.starts_with() core module function": {
		"prefix": "starts",
		"body": [
			"strings.starts_with(${1:string}, ${2:substring})"
		]
	},
	"strings.ends_with() core module function": {
		"prefix": "ends",
		"body": [
			"strings.ends_with(${1:string}, ${2:substring})"
		]
	},
	"strings.reverse() core module function": {
		"prefix": "srev",
		"body": [
			"strings.reverse(${1:string})"
		]
	},
	"arrays.new_array() core module function": {
		"prefix": "newa",
		"body": [
			"arrays.new_array(${1:capacity})"
		]
	},
	"arrays.fill() core module function": {
		"prefix": "fill",
		"body": [
			"arrays.fill(${1:element}, ${2:length})"
		]
	},
	"arrays.index_of() core module function": {
		"prefix": "index",
		"body": [
			"arrays.index_of(${1:array}, ${2:value})"
		]
	},
	"arrays.min() core module function": {
		"prefix": "min",
		"body": [
			"arrays.min(${1:array})"
		]
	},
	"arrays.max() core module function": {
		"prefix": "max",
		"body": [
			"arrays.max(${1:array})"
		]
	},
	"arrays.sum() core module function": {
		"prefix": "sum",
		"body": [
			"arrays.sum(${1:array})"
		]
	},
	"arrays.avg() core module function": {
		"prefix": "avg",
		"body": [
			"arrays.avg(${1:array})"
		]
	},
	"arrays.reverse() core module function": {
		"prefix": "arev",
		"body": [
			"arrays.reverse(${1:array})"
		]
	},
	"arrays.sort() core module function": {
		"prefix": "sort",
		"body": [
			"arrays.sort(${1:array})"
		]
	},
	"utf8.len() core module function": {
		"prefix": "len",
		"body": [
			"utf8.len(${1:string})"
		]
	},
	"utf8.sub() core module function": {
		"prefix": "sub",
		"body": [
			"utf8.sub(${1:string})"
		]
	},
	"regex.new() core module function": {
		"prefix": "rnew",
		"body": [
			"regex.new(${1:pattern})"
		]
	},
	"regex.find() core module function": {
		"prefix": "rfind",
		"body": [
			"regex.find(${1:regex}, ${2:string})"
		]
	},
	"regex.is_match() core module function": {
		"prefix": "rismatch",
		"body": [
			"regex.is_match(${1:regex}, ${2:string})"
		]
	},
	"hashing.sha224() core module function": {
		"prefix": "sha224",
		"body": [
			"hashing.sha224(${1:string})"
		]
	},
	"hashing.sha256() core module function": {
		"prefix": "sha256",
		"body": [
			"hashing.sha256(${1:string})"
		]
	},
	"hashing.sha384() core module function": {
		"prefix": "sha384",
		"body": [
			"hashing.sha384(${1:string})"
		]
	},
	"hashing.sha512() core module function": {
		"prefix": "sha512",
		"body": [
			"hashing.sha512(${1:string})"
		]
	},
	"hashing.sha1() core module function": {
		"prefix": "sha1",
		"body": [
			"hashing.sha1(${1:string})"
		]
	},
	"hashing.sha3() core module function": {
		"prefix": "sha3",
		"body": [
			"hashing.sha3(${1:string})"
		]
	},
	"hashing.md5() core module function": {
		"prefix": "md5",
		"body": [
			"hashing.md5(${1:string})"
		]
	},
	"hashing.ripemd160() core module function": {
		"prefix": "ripemd160",
		"body": [
			"hashing.ripemd160(${1:string})"
		]
	},
	"encoding.base32_encode() core module function": {
		"prefix": "base32e",
		"body": [
			"encoding.base32_encode(${1:string})"
		]
	},
	"encoding.base32_decode() core module function": {
		"prefix": "base32d",
		"body": [
			"encoding.base32_decode(${1:string})"
		]
	},
	"encoding.base58_encode() core module function": {
		"prefix": "base58e",
		"body": [
			"encoding.base58_encode(${1:string})"
		]
	},
	"encoding.base58_decode() core module function": {
		"prefix": "base58d",
		"body": [
			"encoding.base58_decode(${1:string})"
		]
	},
	"encoding.base64_encode() core module function": {
		"prefix": "base64e",
		"body": [
			"encoding.base64_encode(${1:string})"
		]
	},
	"encoding.base64_decode() core module function": {
		"prefix": "base64d",
		"body": [
			"encoding.base64_decode(${1:string})"
		]
	},
	"socket.AF_INET constant": {
		"prefix": "afinet",
		"body": [
			"socket.AF_INET"
		]
	},
	"socket.AF_INET6 constant": {
		"prefix": "afinet6",
		"body": [
			"socket.AF_INET6"
		]
	},
	"socket.SOCK_STREAM constant": {
		"prefix": "socstream",
		"body": [
			"socket.SOCK_STREAM"
		]
	},
	"socket.SOCK_DGRAM constant": {
		"prefix": "socdgram",
		"body": [
			"socket.SOCK_DGRAM"
		]
	},
	"socket.IPPROTO_TCP constant": {
		"prefix": "iptcp",
		"body": [
			"socket.IPPROTO_TCP"
		]
	},
	"socket.IPPROTO_UDP constant": {
		"prefix": "ipudp",
		"body": [
			"socket.IPPROTO_UDP"
		]
	},
	"socket.SOL_SOCKET constant": {
		"prefix": "solsocket",
		"body": [
			"socket.SOL_SOCKET"
		]
	},
	"socket.SO_REUSEADDR constant": {
		"prefix": "soreuseaddr",
		"body": [
			"socket.SO_REUSEADDR"
		]
	},
	"socket.new() core module function": {
		"prefix": "snew",
		"body": [
			"socket.new(${1:domain}, ${2:type}, ${3:protocol})"
		]
	},
	"socket.close() core module function": {
		"prefix": "sclose",
		"body": [
			"socket.close(${1:socket})"
		]
	},
	"socket.connect() core module function": {
		"prefix": "sconnect",
		"body": [
			"socket.connect(${1:socket}, ${2:host}, ${3:port})"
		]
	},
	"socket.accept() core module function": {
		"prefix": "saccept",
		"body": [
			"socket.accept(${1:socket})"
		]
	},
	"socket.bind() core module function": {
		"prefix": "sbind",
		"body": [
			"socket.bind(${1:socket}, ${2:host}, ${3:port})"
		]
	},
	"socket.listen() core module function": {
		"prefix": "slisten",
		"body": [
			"socket.listen(${1:socket}, ${2:backlog})"
		]
	},
	"socket.send() core module function": {
		"prefix": "ssend",
		"body": [
			"socket.send(${1:socket}, ${2:string})"
		]
	},
	"socket.recv() core module function": {
		"prefix": "srecv",
		"body": [
			"socket.recv(${1:socket}, ${2:size})"
		]
	},
	"socket.set_option() core module function": {
		"prefix": "ssetopt",
		"body": [
			"socket.set_option(${1:socket}, ${2:level}, ${3:option}, ${4:value})"
		]
	},
	"socket.get_option() core module function": {
		"prefix": "sgetopt",
		"body": [
			"socket.get_option(${1:socket}, ${2:level}, ${3:option})"
		]
	},
	"socket.set_block() core module function": {
		"prefix": "ssetblock",
		"body": [
			"socket.set_block(${1:socket})"
		]
	},
	"socket.set_nonblock() core module function": {
		"prefix": "ssetnonblock",
		"body": [
			"socket.set_nonblock(${1:socket})"
		]
	}
}
